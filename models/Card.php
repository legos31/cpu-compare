<?php

namespace app\models;

use Yii;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "card".
 *
 * @property int $id
 * @property string|null $name
 * @property string|null $alias
 * @property string|null $image
 * @property string|null $description
 * @property int|null $category_id
 * @property int|null $date
 * @property int|null $last_update
 * @property string|null $release_date
 * @property string|null $hertz
 * @property string|null $type
 * @property string|null $socket
 * @property string|null $score
 * @property string|null $cores
 * @property string|null $turbo_hertz
 * @property string|null $watt
 * @property string|null $l3_cache
 * @property string|null $source_url
 * @property int|null $brand_id
 * @property string|null $image_mini
 * @property string|null $price
 * @property string|null $pt_dollar
 * @property int|null $status
 * @property string|null $category
 * @property float|null $rating
 * @property int|null $counter
 * @property int|null $top
 * @property int|null $best_processor
 * @property int|null $best_score
 * @property int|null $best_price
 * @property int|null $popular
 * @property int|null $is_new
 * @property int|null $last_view
 * @property int|null $recomend
 */
class Card extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'card';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['description'], 'string'],
            [['category_id', 'date', 'last_update', 'brand_id', 'status', 'counter', 'top', 'best_processor', 'best_score', 'best_price', 'popular', 'last_view', 'recomend'], 'integer'],
            [['last_view'], 'safe'],
            [['date', 'last_update'], 'default', 'value' => time()],
            [['status', 'top', 'counter', 'best_processor', 'best_score', 'best_price', 'popular', 'is_new'], 'default', 'value' => 0],
            ['name', 'unique'],
            [['rating'], 'number'],
            [['name', 'alias', 'image', 'pt_dollar', 'hertz', 'type', 'release_date', 'category', 'price', 'socket', 'score', 'cores', 'turbo_hertz', 'watt', 'l3_cache', 'source_url', 'image_mini'], 'string', 'max' => 255],
        ];
    }

    public static function createAlias($s)
    {
        $s = (string) $s; // преобразуем в строковое значение
        $s = strip_tags($s); // убираем HTML-теги
        $s = str_replace(array("\n", "\r"), " ", $s); // убираем перевод каретки
        $s = preg_replace("/\s+/", ' ', $s); // удаляем повторяющие пробелы
        $s = trim($s); // убираем пробелы в начале и конце строки
        $s = function_exists('mb_strtolower') ? mb_strtolower($s) : strtolower($s); // переводим строку в нижний регистр (иногда надо задать локаль)
        $s = strtr($s, array('а' => 'a', 'б' => 'b', 'в' => 'v', 'г' => 'g', 'д' => 'd', 'е' => 'e', 'ё' => 'e', 'ж' => 'j', 'з' => 'z', 'и' => 'i', 'й' => 'y', 'к' => 'k', 'л' => 'l', 'м' => 'm', 'н' => 'n', 'о' => 'o', 'п' => 'p', 'р' => 'r', 'с' => 's', 'т' => 't', 'у' => 'u', 'ф' => 'f', 'х' => 'h', 'ц' => 'c', 'ч' => 'ch', 'ш' => 'sh', 'щ' => 'shch', 'ы' => 'y', 'э' => 'e', 'ю' => 'yu', 'я' => 'ya', 'ъ' => '', 'ь' => ''));
        $s = preg_replace("/[^0-9a-z-_ ]/i", "", $s); // очищаем строку от недопустимых символов
        $s = str_replace(" ", "_", $s); // заменяем пробелы знаком минус
        return $s; // возвращаем результат
    }

    public function beforeSave($insert)
    {
        $this->alias = self::createAlias($this->name);
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Название',
            'alias' => 'Alias',
            'image' => 'Картинка',
            'description' => 'Описание',
            'category_id' => 'Category ID',
            'date' => 'Дата',
            'last_update' => 'Последное обновление',
            'release_date' => 'Дата выхода',
            'hertz' => 'Тактовая частота',
            'brand_id' => 'Бренд',
            'last_view' => 'Бренд',
            'category' => 'Тип'
        ];
    }
    public function getMidRate(){
        return Ratings::find()->where(['card_id' => $this->id, 'category' => 'cpu'])->average('value') ?? 0;
    }


    public function getBrand()
    {
        return $this->hasOne(Brand::className(), ['id' => 'brand_id']);
    }

    public function getBenchmarks()
    {
        return CardBenchmark::find()->where(['card_id' => $this->id])->all();
    }

    public function getSpecifications()
    {
        return CardSpecification::find()->where(['card_id' => $this->id])->all();
    }

    public function getTop10()
    {
        //top10 по рейтингу PassMark
        //return Card::find()->where(['top' => 1])->limit(10)->orderBy('score desc')->all();
        $benchmarks = CardScoreBenchmark::find()->where(['bench_id' => '120'])->limit(5)->orderBy('score desc')->asArray()->all();
        $ids = ArrayHelper::getColumn($benchmarks, 'cpu_id');
        $arrCpu = [];
        foreach ($ids as $item) {
            $arrCpu[] = Card::find()->where(['id' => $item])->one();

        }
        //return Card::find()->where(['id' => $ids])->all();
        return $arrCpu;

    }

    public function getBestProcessor()
    {
        //по рейтингу iGPU
        //return Card::find()->where(['best_processor' => 1])->limit(5)->orderBy('score desc')->all();
        $benchmarks = CardScoreBenchmark::find()->where(['bench_id' => '112'])->limit(5)->orderBy('score desc')->asArray()->all();
        $ids = ArrayHelper::getColumn($benchmarks, 'cpu_id');
        $arrCpu = [];
        foreach ($ids as $item) {
            $arrCpu[] = Card::find()->where(['id' => $item])->one();

        }
        return $arrCpu;
    }

    public function getGeebench5()
    {
        //по рейтингу iGPU
        //return Card::find()->where(['best_processor' => 1])->limit(5)->orderBy('score desc')->all();
        $benchmarks = CardScoreBenchmark::find()->where(['bench_id' => '110'])->limit(5)->orderBy('score desc')->asArray()->all();
        $ids = ArrayHelper::getColumn($benchmarks, 'cpu_id');
        $arrCpu = [];
        foreach ($ids as $item) {
            $arrCpu[] = Card::find()->where(['id' => $item])->one();

        }
        return $arrCpu;
    }

    public function getCinebench23()
    {
        //по рейтингу iGPU
        //return Card::find()->where(['best_processor' => 1])->limit(5)->orderBy('score desc')->all();
        $benchmarks = CardScoreBenchmark::find()->where(['bench_id' => '103'])->limit(5)->orderBy('score desc')->asArray()->all();
        $ids = ArrayHelper::getColumn($benchmarks, 'cpu_id');
        $arrCpu = [];
        foreach ($ids as $item) {
            $arrCpu[] = Card::find()->where(['id' => $item])->one();

        }
        return $arrCpu;
    }

    public function getCinebench20()
    {
        //по рейтингу iGPU
        //return Card::find()->where(['best_processor' => 1])->limit(5)->orderBy('score desc')->all();
        $benchmarks = CardScoreBenchmark::find()->where(['bench_id' => '106'])->limit(5)->orderBy('score desc')->asArray()->all();
        $ids = ArrayHelper::getColumn($benchmarks, 'cpu_id');
        $arrCpu = [];
        foreach ($ids as $item) {
            $arrCpu[] = Card::find()->where(['id' => $item])->one();

        }
        return $arrCpu;
    }

    public function getCinebench15()
    {
        //по рейтингу iGPU
        //return Card::find()->where(['best_processor' => 1])->limit(5)->orderBy('score desc')->all();
        $benchmarks = CardScoreBenchmark::find()->where(['bench_id' => '108'])->limit(5)->orderBy('score desc')->asArray()->all();
        $ids = ArrayHelper::getColumn($benchmarks, 'cpu_id');
        $arrCpu = [];
        foreach ($ids as $item) {
            $arrCpu[] = Card::find()->where(['id' => $item])->one();

        }
        return $arrCpu;
    }

    public function getBestScore()
    {
        //по рейтингу Monero
        //return Card::find()->where(['best_score' => 1])->limit(5)->orderBy('score desc')->all();
        $benchmarks = CardScoreBenchmark::find()->where(['bench_id' => '111'])->limit(5)->orderBy('score desc')->asArray()->all();
        $ids = ArrayHelper::getColumn($benchmarks, 'cpu_id');
        $arrCpu = [];
        foreach ($ids as $item) {
            $arrCpu[] = Card::find()->where(['id' => $item])->one();

        }
        return $arrCpu;

    }

    public function getBestPrice()
    {
        return Card::find()->where(['best_price' => 1])->limit(5)->orderBy('score desc')->all();
    }

    public function getPopulars()
    {
        return Card::find()->limit(10)->orderBy('counter desc')->all();
    }

    public function getLatests()
    {
        return Card::find()->limit(10)->orderBy('date desc')->all();
    }

    public static function check_url($url){
        $headers = @get_headers('https://www.cpu-monkey.com' . $url);
        return $headers && strpos($headers[0], '200');

    }

    public static function curlRequest($url) {
		$ch = curl_init(trim($url));
		$proxy = '176.53.132.118:65233';
		$proxyauth = 'fidi87:U3k8NjU';

		curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
		curl_setopt($ch, CURLOPT_HEADER, 0);
		//curl_setopt($ch, CURLOPT_PROXY, $proxy);
		//curl_setopt($ch, CURLOPT_PROXYUSERPWD, $proxyauth);
		curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 6.3; rv:38.0) Gecko/20100101 Firefox/38.0');
		curl_setopt($ch, CURLOPT_BINARYTRANSFER,1);
		curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
		curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
		$str=curl_exec($ch);
		return $str;
		
	}

    public static function addNew($data, $url, $image) {
        $path = '/images/cpu/' . self::createAlias($data['CPU generation and family']['Name:']) . '.png';
        $pathToMove = realpath (__DIR__ .'/..') . "/web" . $path;
        //var_dump($data);die;
        //if (self::check_url($image)) {
            //$file = file_get_contents('https://www.cpu-monkey.com' . $image);
            $file = self::curlRequest('https://www.cpu-monkey.com' . $image);
            file_put_contents($pathToMove, $file);
        //}
        $card = new self();
        echo 'new!';
        $card->name = $data['CPU generation and family']['Name:'];
        $card->category_id = 1;
        $card->date = time();
        $card->last_update = time();
        $card->release_date = $data['Technical details']['Release date:'];
        $card->hertz = $data['CPU Cores and Base Frequency']['Frequency:'];
        //$card->hertz = $data['CPU Cores and Base Frequency']['A-Core Frequency:'];
       
        $card->turbo_hertz = $data['CPU Cores and Base Frequency']['Turbo Frequency (1 Core):'];
        $card->socket = $data['Technical details']['Socket:'];
        $card->cores = $data['CPU Cores and Base Frequency']['CPU Cores / Threads:'];
        $card->watt = $data['Thermal Management']['TDP (PL1 / PBP):'];
       
        $card->l3_cache = $data['Technical details']['L3-Cache:'];
        $card->source_url = $url;
        $card->status = 1;
        $card->category = $data['CPU generation and family']['Segment:'];
        $card->type = $data['Memory & PCIe']['Memory type:'];
       
        $card->image = $path;
        $card->image_mini = $path;
        $card->is_new = 0;        
        $card->brand_id = Brand::getBrandId($data['CPU generation and family']['Name:']);
        //$card->brand_id = Brand::getBrandId('AMD Ryzen');
        $card->save();
        return $card;
        
    }

    public static function parsed($id) {
        $model = self::findOne($id);
        $model->is_new = 0;
        $model->save();
    }

    public function getMeta(){
        //$lang_code = \Yii::$app->request->headers['x-gt-lang'] ?? 'en';
        $lang_code = Yii::$app->language ?? 'en';
        $language = \app\modules\admin\models\Languages::find()->where(['code' => $lang_code])->one();
        $meta = \app\modules\admin\models\PageLanguage::find()->where(['page_id' => '2', 'language_id' => $language->id])->one();
        return [
            'title' => $this->replace($meta->title ?? ''),
            'description' => $this->replace($meta->description ?? ''),
            'card_description' => $this->replace($meta->card_description ?? ''),
        ];
    }

    public function replace($str){
        $brand_name = '';
        if(Yii::$app->request->get('brand')){
            $brand = Brand::find()->where(['id' => Yii::$app->request->get('brand')])->one();
            $brand_name = $brand->name ?? '';
        }
        $str = str_replace('{{name}}', $this->name, $str);
        $str = str_replace('{{release_date}}', $this->release_date, $str);
        $str = str_replace('{{hertz}}', $this->hertz, $str);
        $str = str_replace('{{type}}', $this->type, $str);
        $str = str_replace('{{socket}}', $this->socket, $str);
        $str = str_replace('{{cores}}', $this->cores, $str);
        $str = str_replace('{{watt}}', $this->watt, $str);
        $str = str_replace('{{brand}}', $brand_name, $str);
        return $str;
    }

    public function getListmeta(){
        //$lang_code = \Yii::$app->request->headers['x-gt-lang'] ?? 'en';
        $lang_code = Yii::$app->language ?? 'en';
        $language = \app\modules\admin\models\Languages::find()->where(['code' => $lang_code])->one();
        $page = 7;
        if(Yii::$app->request->get('brand')){
            $page = 8;
        }
        $meta = \app\modules\admin\models\PageLanguage::find()->where(['page_id' => $page, 'language_id' => $language->id])->one();
        return [
            'title' => $this->replace($meta->title ?? ''),
            'description' => $this->replace($meta->description ?? ''),
            'card_description' => $this->replace($meta->card_description ?? ''),
        ];
    }
}
