<?php

namespace app\models;

use yii\helpers\ArrayHelper;
use Yii;
use app\models\GpuTotalScore;

/**
 * This is the model class for table "gpu".
 *
 * @property int $id
 * @property string|null $name
 * @property int|null $category_id
 * @property int|null $brand_id
 * @property string|null $image
 * @property string|null $image_mini
 * @property string|null $image_logo
 * @property string|null $alias
 * @property string|null $description
 * @property int|null $date
 * @property int|null $last_update
 * @property string|null $release_date
 * @property string|null $hertz
 * @property string|null $type
 * @property string|null $score
 * @property string|null $price
 * @property string|null $memory_size
 * @property string|null $memory_type
 * @property float|null $rating
 * @property int|null $status
 * @property string|null $source_url
 * @property int|null $counter
 * @property int|null $top
 * @property int|null $best_processor
 * @property int|null $best_score
 * @property int|null $best_price
 * @property int|null $popular
 * @property int|null $is_new
 * @property int|null $last_view
 * @property int|null $recomend
 */
class Gpu extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'gpu';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['category_id', 'brand_id', 'date', 'last_update', 'status', 'counter', 'top', 'best_processor', 'best_score', 'best_price', 'popular', 'is_new', 'last_view', 'recomend'], 'integer'],
            [['description'], 'string'],
            [['rating'], 'number'],
            [['date', 'last_update'], 'default', 'value' => time()],
            [['status', 'top', 'counter', 'best_processor', 'best_score', 'best_price', 'popular'], 'default', 'value' => 0],
            [['is_new'], 'default', 'value' => 1],
            ['name', 'unique'],
            [['name', 'image', 'image_mini', 'image_logo', 'alias', 'release_date', 'hertz', 'type', 'score', 'price', 'memory_size', 'memory_type'], 'string', 'max' => 255],
        ];
    }

    public function createAlias($s)
    {
        $s = (string) $s; // преобразуем в строковое значение
        $s = strip_tags($s); // убираем HTML-теги
        $s = str_replace(array("\n", "\r"), " ", $s); // убираем перевод каретки
        $s = preg_replace("/\s+/", ' ', $s); // удаляем повторяющие пробелы
        $s = trim($s); // убираем пробелы в начале и конце строки
        $s = function_exists('mb_strtolower') ? mb_strtolower($s) : strtolower($s); // переводим строку в нижний регистр (иногда надо задать локаль)
        $s = strtr($s, array('а' => 'a', 'б' => 'b', 'в' => 'v', 'г' => 'g', 'д' => 'd', 'е' => 'e', 'ё' => 'e', 'ж' => 'j', 'з' => 'z', 'и' => 'i', 'й' => 'y', 'к' => 'k', 'л' => 'l', 'м' => 'm', 'н' => 'n', 'о' => 'o', 'п' => 'p', 'р' => 'r', 'с' => 's', 'т' => 't', 'у' => 'u', 'ф' => 'f', 'х' => 'h', 'ц' => 'c', 'ч' => 'ch', 'ш' => 'sh', 'щ' => 'shch', 'ы' => 'y', 'э' => 'e', 'ю' => 'yu', 'я' => 'ya', 'ъ' => '', 'ь' => ''));
        $s = preg_replace("/[^0-9a-z-_ ]/i", "", $s); // очищаем строку от недопустимых символов
        $s = str_replace(" ", "_", $s); // заменяем пробелы знаком минус
        return $s; // возвращаем результат
    }

    public function beforeSave($insert)
    {
        $this->alias = $this->createAlias($this->name);
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Name',
            'category_id' => 'Category ID',
            'brand_id' => 'Brand ID',
            'image' => 'Image',
            'image_mini' => 'Image Mini',
            'alias' => 'Alias',
            'description' => 'Description',
            'date' => 'Date',
            'last_update' => 'Last Update',
            'release_date' => 'Release Date',
            'hertz' => 'Hertz',
            'type' => 'Type',
            'score' => 'Score',
            'price' => 'Price',
            'memory_size' => 'Memory Size',
            'memory_type' => 'Memory Type',
            'rating' => 'Rating',
            'status' => 'Status',
        ];
    }

    public function getMidRate(){
        return Ratings::find()->where(['card_id' => $this->id, 'category' => 'gpu'])->average('value') ?? 0;
    }

    public function getBrand()
    {
        return $this->hasOne(Brand::className(), ['id' => 'brand_id']);
    }

    public function getBenchmarks()
    {
        return GpuBenchmark::find()->where(['gpu_id' => $this->id])->all();
    }

    public function getSpecifications()
    {
        return GpuSpecification::find()->where(['gpu_id' => $this->id])->all();
    }

    public function OneSpecs($idSpecs, $value) {
        if ($this->id != null) {
            $gpuSpecs = GpuSpecification::find()->where(['gpu_id' => $this->id, 'specification_id' => $idSpecs])->one();
            $gpuSpecsItems = GpuSpecificationItems::find()->where(['gpu_specification_id' => $gpuSpecs->id])->all();
            
            foreach ($gpuSpecsItems as $item) {
                if ($item->name == $value) {
                    return $item->value;
                }

                return '';
            }
        }
        
        return '';
    }

    public function getTop10()
    {
        //по рейтингу FP32
        //return Gpu::find()->where(['top' => 1])->limit(10)->orderBy('score desc')->all();
        $benchmarks = GpuScoreBenchmark::find()->where(['bench_id' => '121'])->limit(5)->orderBy('position asc')->asArray()->all();
        $ids = ArrayHelper::getColumn($benchmarks, 'gpu_id');
        $arrGpu = [];
        foreach ($ids as $item) {
            $arrGpu[] = Gpu::find()->where(['id' => $item])->one();

        }
        return $arrGpu;
    }

    public function getBestProcessor()
    {
        //по рейтингу 3DMark Benchmark
        //return Gpu::find()->where(['best_processor' => 1])->limit(5)->orderBy('score desc')->all();
        $benchmarks = GpuScoreBenchmark::find()->where(['bench_id' => '122'])->limit(5)->orderBy('position asc')->asArray()->all();
        $ids = ArrayHelper::getColumn($benchmarks, 'gpu_id');
        $arrGpu = [];
        foreach ($ids as $item) {
            $arrGpu[] = Gpu::find()->where(['id' => $item])->one();

        }
        return $arrGpu;
    }

    public function getBestScore()
    {
        //по рейтингу Battlefield 5
        //return Gpu::find()->where(['best_score' => 1])->limit(5)->orderBy('score desc')->all();
        $benchmarks = GpuScoreBenchmark::find()->where(['bench_id' => '123'])->limit(5)->orderBy('position asc')->asArray()->all();
        $ids = ArrayHelper::getColumn($benchmarks, 'gpu_id');
        $arrGpu = [];
        foreach ($ids as $item) {
            $arrGpu[] = Gpu::find()->where(['id' => $item])->one();

        }
        return $arrGpu;
    }

    public function getBestPrice()
    {
        return Gpu::find()->where(['best_price' => 1])->limit(5)->orderBy('score desc')->all();
    }

    public function getPopulars()
    {
        return Gpu::find()->limit(10)->orderBy('counter desc')->all();
    }

    public function getNvidia()
    {
        
        $arrGpu = Gpu::find()->where(['brand_id' => 9])->orderBy('score ')->limit(5)->all();
        return $arrGpu;
    }

    public function getAmd()
    {
        $arrGpu = Gpu::find()->where(['brand_id' => 2])->orderBy('score ')->limit(5)->all();
        return $arrGpu;
    }

    public function getEthereum()
    {
       
        $benchmarks = GpuScoreBenchmark::find()->where(['bench_id' => '125'])->limit(5)->orderBy('position asc')->asArray()->all();
        $ids = ArrayHelper::getColumn($benchmarks, 'gpu_id');
        $arrGpu = [];
        foreach ($ids as $item) {
            $arrGpu[] = Gpu::find()->where(['id' => $item])->one();

        }
        return $arrGpu;
    }

    public function getErgo()
    {
       
        $benchmarks = GpuScoreBenchmark::find()->where(['bench_id' => '126'])->limit(5)->orderBy('score desc')->asArray()->all();
        $ids = ArrayHelper::getColumn($benchmarks, 'gpu_id');
        $arrGpu = [];
        foreach ($ids as $item) {
            $arrGpu[] = Gpu::find()->where(['id' => $item])->one();

        }
        return $arrGpu;
    }

    public static function getBrandName($text){
        $arr = explode(' ', $text);
        $brand = Brand::find()->where(['like', 'name', $arr[0]])->one();
        return $brand->id ?? null;
    }

    public static function addNew($gpu, $specs, $image){
        $model = self::find()->where(['name' => $gpu->name])->one();
        if(!$model){
            $model = new Gpu();
            $model->name = $gpu->name;
            $model->category_id = 2;
            $model->brand_id = self::getBrandName($specs['GPU']['Based on:']);
            $model->image = $image;
            $model->image_mini = $image;
            $model->alias = MonkeyParser::createAlias($gpu->name);
            $model->date = time();
            $model->last_update = time();
            $model->release_date = $specs['Additional data']['Release date:'];
            $model->price = $specs['Additional data']['Launch Price:'];
            $model->hertz = $specs['Clock Speeds']['Base Clock:'];
            $model->memory_type = $specs['Memory']['Memory Type:'];
            $model->memory_size = $specs['Memory']['Memory Size:'];
            $model->type = $specs['Thermal Design']['TDP:'];
            $model->score = rand(90, 100) . '%';
            $model->status = 1;
            $model->counter = 0;
            $model->top = 0;
            $model->best_processor = 0;
            $model->best_score = 0;
            $model->best_price = 0;
            $model->popular = 0;
            $model->is_new = 1;
            $model->source_url = $gpu->url;
            $model->save(false);
        }
        return $model;
    }

    public static function parsed($id) {
        $model = self::findOne($id);
        $model->is_new = 0;
        $model->save();
    }

    public function getMeta(){
        //$lang_code = \Yii::$app->request->headers['x-gt-lang'] ?? 'en';
        $lang_code = Yii::$app->language ?? 'en';
        $language = \app\modules\admin\models\Languages::find()->where(['code' => $lang_code])->one();
        $meta = \app\modules\admin\models\PageLanguage::find()->where(['page_id' => '4', 'language_id' => $language->id])->one();
        return [
            'title' => $this->replace($meta->title ?? ''),
            'description' => $this->replace($meta->description ?? ''),
            'card_description' => $this->replace($meta->card_description ?? ''),
        ];
    }

    public function replace($str){
        $brand_name = '';
        if(Yii::$app->request->get('brand')){
            $brand = Brand::find()->where(['id' => Yii::$app->request->get('brand')])->one();
            $brand_name = $brand->name ?? '';
        }
        $str = str_replace('{{name}}', $this->name, $str);
        $str = str_replace('{{release_date}}', $this->release_date, $str);
        $str = str_replace('{{hertz}}', $this->hertz, $str);
        $str = str_replace('{{memory_size}}', $this->memory_size, $str);
        $str = str_replace('{{memory_type}}', $this->memory_type, $str);
        $str = str_replace('{{watt}}', $this->OneSpecs('214', 'TDP'), $str);
        $str = str_replace('{{brand}}', $brand_name, $str);
        return $str;
    }

    public function getListmeta(){
        //$lang_code = \Yii::$app->request->headers['x-gt-lang'] ?? 'en';
        $lang_code = Yii::$app->language ?? 'en';
        $language = \app\modules\admin\models\Languages::find()->where(['code' => $lang_code])->one();
        $page = 9;
        if(Yii::$app->request->get('brand')){
            $page = 10;
        }
        $meta = \app\modules\admin\models\PageLanguage::find()->where(['page_id' => $page, 'language_id' => $language->id])->one();
        return [
            'title' => $this->replace($meta->title ?? ''),
            'description' => $this->replace($meta->description ?? ''),
            'card_description' => $this->replace($meta->card_description ?? ''),
        ];
    }
    public function getLatests()
    {
        return Gpu::find()->limit(10)->orderBy('date desc')->all();
    }

}
