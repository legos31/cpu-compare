<?php

namespace app\modules\admin\models;

use app\models\Brand;
use Yii;

/**
 * This is the model class for table "card".
 *
 * @property int $id
 * @property string|null $name
 * @property string|null $alias
 * @property string|null $image
 * @property string|null $description
 * @property int|null $category_id
 * @property int|null $date
 * @property int|null $last_update
 * @property string|null $release_date
 * @property string|null $hertz
 * @property string|null $type
 * @property string|null $socket
 * @property string|null $score
 * @property string|null $cores
 * @property string|null $turbo_hertz
 * @property string|null $watt
 * @property string|null $l3_cache
 * @property string|null $source_url
 * @property int|null $brand_id
 * @property string|null $image_mini
 * @property string|null $price
 * @property string|null $pt_dollar
 * @property int|null $status
 * @property string|null $category
 * @property float|null $rating
 * @property int|null $counter
 * @property int|null $top
 * @property int|null $best_processor
 * @property int|null $best_score
 * @property int|null $best_price
 * @property int|null $popular
 * @property int|null $is_new
 * @property int|null $last_view
 * @property int|null $recomend
 */
class Card extends \yii\db\ActiveRecord
{
    public $file;
    public $file_mini;

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'card';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['description'], 'string'],
            [['category_id', 'date', 'last_update', 'brand_id', 'status', 'counter', 'recomend'], 'integer'],
            [['top', 'best_processor', 'best_score', 'best_price', 'popular'], 'safe'],
            [['rating'], 'number'],
            [['name', 'alias', 'image', 'release_date', 'hertz', 'type', 'socket', 'score', 'cores', 'turbo_hertz', 'watt', 'l3_cache', 'source_url', 'image_mini', 'price', 'pt_dollar', 'category'], 'string', 'max' => 255],
            [['name'], 'unique'],
            [['file', 'file_mini'], 'file', 'extensions' => 'png, jpg']
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'type' => 'Сегмент',
            'counter' => 'Количество просмотров',
            'top' => 'Топ 10',
            'best_processor' => 'Лучший интегрированный процессор',
            'best_score' => 'Лучшая общая производительность',
            'best_price' => 'Лучшие процессоры по соотношению цена-качество',
            'popular' => 'Популярные процессоры',
            'socket' => 'Сокет',
            'score' => 'Производи-тельность',
            'cores' => 'Количество ядер',
            'turbo_hertz' => 'Turbo тактовая частота',
            'watt' => 'Энергопо-требление',
            'l3_cache' => 'L3 Cache',
            'source_url' => 'Источник',
            'file' => 'Картинка',
            'file_mini' => 'Картинка мини',
            'image_mini' => 'Картинка',
            'price' => 'Цена',
            'pt_dollar' => 'Производительность за доллар',
            'status' => 'Статус',
            'rating' => 'Оценка',
            'name' => 'Название',
            'alias' => 'Alias',
            'image' => 'Картинка',
            'description' => 'Описание',
            'category_id' => 'Category ID',
            'date' => 'Дата',
            'last_update' => 'Последное обновление',
            'release_date' => 'Дата выхода',
            'hertz' => 'Тактовая частота',
            'brand_id' => 'Бренд',
            'category' => 'Тип'
        ];
    }

    public function beforeSave($insert)
    {
        $this->alias = createAlias($this->name);
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function upload()
    {
        if ($this->validate()) {
            if (file_exists($this->image)  && !empty($this->file)) {
                unlink($this->image);
            }
            if (file_exists($this->image_mini)  && !empty($this->file_mini)) {
                unlink($this->image_mini);
            }

            if ($this->file) {
                $path = 'images/uploads/card/' . $this->alias . '.' . $this->file->extension;
                $this->file->saveAs($path);
                $this->file = null;
                $this->image = '/' . $path;
            }

            if ($this->file_mini) {
                $path2 = 'images/uploads/card/' . $this->alias . '_mini.' . $this->file_mini->extension;
                $this->file_mini->saveAs($path2);
                $this->image_mini = '/' . $path2;
                $this->file_mini = null;
            }

            $this->save();
        } else {
            return false;
        }
    }

    public function getBrand()
    {
        return $this->hasOne(Brand::className(), ['id' => 'brand_id']);
    }

    public function getBenchmarks()
    {
        return $this->hasMany(Benchmark::className(), ['id' => 'benchmark_id'])
            ->viaTable('card_benchmark', ['card_id' => 'id']);
    }

    public function getBenchmarkItems($id)
    {
        $it = CardBenchmark::find()->where(['card_id' => $this->id, 'benchmark_id' => $id])->select('id')->column();
        $items = CardBenchmarkItems::findAll(['card_benchmark_id' => $it]);
        return $items;
    }

    public function getSpecifications()
    {
        return $this->hasMany(Specification::className(), ['id' => 'specification_id'])
            ->viaTable('card_specification', ['card_id' => 'id']);
    }

    public function getSpecItems($spec_id)
    {
        $it = CardSpecification::find()->where(['card_id' => $this->id, 'specification_id' => $spec_id])->select('id')->column();
        $items = CardSpecificationItems::findAll(['card_specification_id' => $it]);
        return $items;
    }

    public function saveSpecifications()
    {
        $data = Yii::$app->request->post('Specification');
        if ($data) {
            $gp_specs = CardSpecification::find()->where(['card_id' => $this->id])->all();
            foreach ($gp_specs as $gp_spec) {
                CardSpecificationItems::deleteAll(['card_specification_id' => $gp_spec->id]);
                $gp_spec->delete();
            }
            foreach ($data as $item) {
                $gs = new CardSpecification();
                $gs->card_id = $this->id;
                $gs->specification_id = $item['label'];
                if ($gs->save()) {
                    foreach ($item['group'] as $specification) {
                        $gsi = new CardSpecificationItems();
                        $gsi->name = $specification['label'];
                        $gsi->value = $specification['value'];
                        $gsi->card_specification_id = $gs->id;
                        $gsi->save();
                    }
                }
            }
        }
    }

    public function saveBenchmark()
    {
        $data = Yii::$app->request->post('Benchmark');
        if ($data) {
            $gp_specs = CardBenchmark::find()->where(['card_id' => $this->id])->all();
            foreach ($gp_specs as $gp_spec) {
                CardBenchmarkItems::deleteAll(['card_benchmark_id' => $gp_spec->id]);
                $gp_spec->delete();
            }
            foreach ($data as $item) {
                $gs = new CardBenchmark();
                $gs->card_id = $this->id;
                $gs->benchmark_id = $item['label'];
                if ($gs->save()) {
                    if ($item['group']) {
                        foreach ($item['group'] as $specification) {
                            $gsi = new CardBenchmarkItems();
                            $gsi->name = $specification['label'];
                            $gsi->value = $specification['value'];
                            $gsi->card_benchmark_id = $gs->id;
                            $gsi->save();
                        }
                    }
                }
            }
        }
    }
}
